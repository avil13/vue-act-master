import{l as n,f as s,G as a}from"./framework.8207f0d3.js";const t='{"title":"ActMasterAction","description":"","frontmatter":{},"headers":[{"level":2,"title":"Simple action","slug":"simple-action"},{"level":2,"title":"Cancel Action","slug":"cancel-action"},{"level":2,"title":"Validate arguments","slug":"validate-arguments"},{"level":2,"title":"With transformation","slug":"with-transformation"},{"level":2,"title":"Class Styled Action","slug":"class-styled-action"},{"level":2,"title":"Wait","slug":"wait"},{"level":2,"title":"DI in Actions","slug":"di-in-actions"},{"level":3,"title":"Adding an entity","slug":"adding-an-entity"},{"level":3,"title":"Using entities","slug":"using-entities"},{"level":2,"title":"Emit another Action in Action","slug":"emit-another-action-in-action"}],"relativePath":"action/04-actions.md","lastUpdated":1610081471120}',p={},o=a('<h1 id="actmasteraction"><a class="header-anchor" href="#actmasteraction" aria-hidden="true">#</a> ActMasterAction</h1><p>Action is the place to store your business logic.</p><p>This is essentially an implementation of the Commander pattern.</p><p>Action is an object with the required <code>name</code> property and the <code>exec</code> method.</p><h2 id="simple-action"><a class="header-anchor" href="#simple-action" aria-hidden="true">#</a> Simple action</h2><div class="language-ts"><pre><code><span class="token comment">// simplest-action.ts</span>\n\n<span class="token keyword">import</span> <span class="token punctuation">{</span> ActMasterAction <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">&#39;vue-act-master&#39;</span><span class="token punctuation">;</span>\n\n<span class="token keyword">export</span> <span class="token keyword">const</span> dataAction<span class="token operator">:</span> ActMasterAction <span class="token operator">=</span> <span class="token punctuation">{</span>\n  name<span class="token operator">:</span> <span class="token string">&#39;get.data&#39;</span><span class="token punctuation">,</span>\n\n  <span class="token keyword">async</span> <span class="token function">exec</span><span class="token punctuation">(</span>id <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n    <span class="token keyword">const</span> url <span class="token operator">=</span> <span class="token template-string"><span class="token template-punctuation string">`</span><span class="token string">https://jsonplaceholder.typicode.com/todos/</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">${</span> id <span class="token interpolation-punctuation punctuation">}</span></span><span class="token template-punctuation string">`</span></span><span class="token punctuation">;</span>\n\n    <span class="token keyword">const</span> response <span class="token operator">=</span> <span class="token keyword">await</span> <span class="token function">fetch</span><span class="token punctuation">(</span>url<span class="token punctuation">)</span><span class="token punctuation">;</span>\n    <span class="token keyword">return</span> response<span class="token punctuation">.</span><span class="token function">json</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n    <span class="token comment">// =&gt; {</span>\n    <span class="token comment">//       userId: 1,</span>\n    <span class="token comment">//       id: 1,</span>\n    <span class="token comment">//       title: &quot;delectus aut autem&quot;,</span>\n    <span class="token comment">//       completed: false</span>\n    <span class="token comment">//    }</span>\n  <span class="token punctuation">}</span><span class="token punctuation">,</span>\n<span class="token punctuation">}</span><span class="token punctuation">;</span>\n</code></pre></div><p>Having <a href="./02-add-action.html">added this action</a>, we can now call it and <a href="./03-subscribtion.html">get the result</a>.</p><p>Now we can call <code>exec</code> using the action name.</p><div class="language-ts"><pre><code><span class="token keyword">this</span><span class="token punctuation">.</span>value <span class="token operator">=</span> <span class="token keyword">await</span> <span class="token keyword">this</span><span class="token punctuation">.</span>$act<span class="token punctuation">.</span><span class="token function">exec</span><span class="token punctuation">(</span><span class="token string">&#39;get.data&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n</code></pre></div><p>You can also pass arguments to the <code>exec</code> method.</p><div class="language-ts"><pre><code><span class="token keyword">this</span><span class="token punctuation">.</span>value <span class="token operator">=</span> <span class="token keyword">await</span> <span class="token keyword">this</span><span class="token punctuation">.</span>$act<span class="token punctuation">.</span><span class="token function">exec</span><span class="token punctuation">(</span><span class="token string">&#39;get.data&#39;</span><span class="token punctuation">,</span> <span class="token number">101</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n</code></pre></div><h2 id="cancel-action"><a class="header-anchor" href="#cancel-action" aria-hidden="true">#</a> Cancel Action</h2><p>Action can be interrupted by returning a special object &quot;CancelledAct&quot;. This will stop the chain of events if you build it using <code>wait</code> or <code>emit</code>.</p><div class="language-ts"><pre><code><span class="token comment">// cancel-action.ts</span>\n\n<span class="token keyword">import</span> <span class="token punctuation">{</span> ActMasterAction<span class="token punctuation">,</span> CancelledAct <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">&#39;vue-act-master&#39;</span><span class="token punctuation">;</span>\n\n<span class="token keyword">export</span> <span class="token keyword">const</span> dataAction<span class="token operator">:</span> ActMasterAction <span class="token operator">=</span> <span class="token punctuation">{</span>\n  name<span class="token operator">:</span> <span class="token string">&#39;get.data&#39;</span><span class="token punctuation">,</span>\n\n  <span class="token function">exec</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n    <span class="token comment">// ...</span>\n    <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">CancelledAct</span><span class="token punctuation">(</span><span class="token string">&#39;Some reason to stop action...&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n  <span class="token punctuation">}</span><span class="token punctuation">,</span>\n<span class="token punctuation">}</span><span class="token punctuation">;</span>\n</code></pre></div><h2 id="validate-arguments"><a class="header-anchor" href="#validate-arguments" aria-hidden="true">#</a> Validate arguments</h2><p>Before calling the <code>exec</code> method, you can validate the arguments that are sent to it.</p><p>We add a method <code>validateInput</code> to which all arguments intended for <code>exec</code> get.</p><p>If they are valid we return <code>true</code>.</p><p>Otherwise an error message of your choice.</p><div class="language-ts"><pre><code><span class="token comment">// validate-action.ts</span>\n\n<span class="token keyword">import</span> <span class="token punctuation">{</span> ActMasterAction<span class="token punctuation">,</span> CancelledAct <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">&#39;vue-act-master&#39;</span><span class="token punctuation">;</span>\n\n<span class="token keyword">export</span> <span class="token keyword">const</span> dataAction<span class="token operator">:</span> ActMasterAction <span class="token operator">=</span> <span class="token punctuation">{</span>\n  name<span class="token operator">:</span> <span class="token string">&#39;get.data&#39;</span><span class="token punctuation">,</span>\n\n  <span class="token function">validateInput</span><span class="token punctuation">(</span>arg<span class="token operator">?</span><span class="token operator">:</span> <span class="token builtin">any</span><span class="token punctuation">)</span><span class="token operator">:</span> <span class="token boolean">true</span> <span class="token operator">|</span> CancelledAct <span class="token punctuation">{</span>\n    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token keyword">typeof</span> arg <span class="token operator">!==</span> <span class="token string">&#39;number&#39;</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n      <span class="token keyword">const</span> errorData <span class="token operator">=</span> <span class="token punctuation">{</span>\n        id<span class="token operator">:</span> <span class="token string">&#39;Must be a number&#39;</span>\n      <span class="token punctuation">}</span><span class="token punctuation">;</span>\n      <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">CancelledAct</span><span class="token punctuation">(</span><span class="token string">&#39;Validation error&#39;</span><span class="token punctuation">,</span> errorData<span class="token punctuation">)</span><span class="token punctuation">;</span>\n    <span class="token punctuation">}</span>\n    <span class="token keyword">return</span> <span class="token boolean">true</span><span class="token punctuation">;</span> <span class="token comment">// If everything is correct</span>\n  <span class="token punctuation">}</span>\n\n  <span class="token keyword">async</span> <span class="token function">exec</span><span class="token punctuation">(</span>id<span class="token operator">:</span> <span class="token builtin">number</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n    <span class="token keyword">const</span> url <span class="token operator">=</span> <span class="token template-string"><span class="token template-punctuation string">`</span><span class="token string">https://jsonplaceholder.typicode.com/todos/</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">${</span>id<span class="token interpolation-punctuation punctuation">}</span></span><span class="token template-punctuation string">`</span></span><span class="token punctuation">;</span>\n    <span class="token keyword">const</span> response <span class="token operator">=</span> <span class="token keyword">await</span> <span class="token function">fetch</span><span class="token punctuation">(</span>url<span class="token punctuation">)</span><span class="token punctuation">;</span>\n    <span class="token keyword">return</span> response<span class="token punctuation">.</span><span class="token function">json</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n  <span class="token punctuation">}</span><span class="token punctuation">,</span>\n<span class="token punctuation">}</span><span class="token punctuation">;</span>\n</code></pre></div><p>And try to exec</p><div class="language-ts"><pre><code><span class="token keyword">const</span> result <span class="token operator">=</span> <span class="token keyword">await</span> <span class="token keyword">this</span><span class="token punctuation">.</span>$act<span class="token punctuation">.</span><span class="token function">exec</span><span class="token punctuation">(</span><span class="token string">&#39;get.data&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;101&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n\n<span class="token keyword">if</span> <span class="token punctuation">(</span>result instaceof CancelledAct<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n  <span class="token comment">// ... Handling the error</span>\n  <span class="token keyword">return</span><span class="token punctuation">;</span>\n<span class="token punctuation">}</span>\n</code></pre></div><h2 id="with-transformation"><a class="header-anchor" href="#with-transformation" aria-hidden="true">#</a> With transformation</h2><p>It often happens that the result of a call needs to be changed.</p><p>This can easily be done through the <code>transform</code> method.</p><p>The argument will be the result of the <code>exec</code> method.</p><div class="language-ts"><pre><code><span class="token comment">// transformed-action.ts</span>\n\n<span class="token keyword">import</span> <span class="token punctuation">{</span> ActMasterAction <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">&#39;vue-act-master&#39;</span><span class="token punctuation">;</span>\n\n<span class="token keyword">export</span> <span class="token keyword">const</span> transformedAction<span class="token operator">:</span> ActMasterAction <span class="token operator">=</span> <span class="token punctuation">{</span>\n  name<span class="token operator">:</span> <span class="token string">&#39;get.data.transformed&#39;</span><span class="token punctuation">,</span>\n\n  <span class="token keyword">async</span> <span class="token function">exec</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n    <span class="token keyword">const</span> url <span class="token operator">=</span> <span class="token string">&#39;https://jsonplaceholder.typicode.com/todos/1&#39;</span><span class="token punctuation">;</span>\n\n    <span class="token keyword">const</span> response <span class="token operator">=</span> <span class="token keyword">await</span> <span class="token function">fetch</span><span class="token punctuation">(</span>url<span class="token punctuation">)</span><span class="token punctuation">;</span>\n    <span class="token keyword">return</span> response<span class="token punctuation">.</span><span class="token function">json</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n    <span class="token comment">// Output</span>\n    <span class="token comment">// {</span>\n    <span class="token comment">//  userId: 1,</span>\n    <span class="token comment">//  id: 1,</span>\n    <span class="token comment">//  title: &quot;delectus aut autem&quot;,</span>\n    <span class="token comment">//  completed: false</span>\n    <span class="token comment">// }</span>\n  <span class="token punctuation">}</span>\n\n  <span class="token function">transform</span><span class="token punctuation">(</span>data<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n    <span class="token comment">// Modifies the data after receiving</span>\n    <span class="token keyword">return</span> <span class="token punctuation">{</span>\n      todoItem<span class="token operator">:</span> data<span class="token punctuation">.</span>title<span class="token punctuation">,</span>\n      done<span class="token operator">:</span> data<span class="token punctuation">.</span>completed<span class="token punctuation">,</span>\n    <span class="token punctuation">}</span><span class="token punctuation">;</span>\n  <span class="token punctuation">}</span>\n<span class="token punctuation">}</span><span class="token punctuation">;</span>\n</code></pre></div><p>And try to exec</p><div class="language-ts"><pre><code><span class="token keyword">const</span> result <span class="token operator">=</span> <span class="token keyword">await</span> <span class="token keyword">this</span><span class="token punctuation">.</span>$act<span class="token punctuation">.</span><span class="token function">exec</span><span class="token punctuation">(</span><span class="token string">&#39;get.data.transformed&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token builtin">console</span><span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>result<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// =&gt; { todoItem: &quot;delectus aut autem&quot;, done: false }</span>\n</code></pre></div><h2 id="class-styled-action"><a class="header-anchor" href="#class-styled-action" aria-hidden="true">#</a> Class Styled Action</h2><p>You can use classes to create actions.</p><p>Along with classes, it will be possible to use decorators helper.</p><div class="language-ts"><pre><code><span class="token comment">// class-action.ts</span>\n\n<span class="token keyword">import</span> <span class="token punctuation">{</span> ActMasterAction <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">&#39;vue-act-master&#39;</span><span class="token punctuation">;</span>\n\n<span class="token keyword">export</span> <span class="token keyword">class</span> <span class="token class-name">ClassAction</span> <span class="token keyword">implements</span> <span class="token class-name">ActMasterAction</span> <span class="token punctuation">{</span>\n  name <span class="token operator">=</span> <span class="token string">&#39;get.data&#39;</span><span class="token punctuation">;</span>\n\n  <span class="token keyword">async</span> <span class="token function">exec</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n    <span class="token keyword">const</span> url <span class="token operator">=</span> <span class="token string">&#39;https://jsonplaceholder.typicode.com/todos/1&#39;</span><span class="token punctuation">;</span>\n\n    <span class="token keyword">const</span> response <span class="token operator">=</span> <span class="token keyword">await</span> <span class="token function">fetch</span><span class="token punctuation">(</span>url<span class="token punctuation">)</span><span class="token punctuation">;</span>\n    <span class="token keyword">return</span> response<span class="token punctuation">.</span><span class="token function">json</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n  <span class="token punctuation">}</span>\n<span class="token punctuation">}</span>\n</code></pre></div><div class="language-ts"><pre><code><span class="token comment">// ../you/actions/path</span>\n\n<span class="token keyword">export</span> <span class="token keyword">const</span> actions<span class="token operator">:</span> ActMasterAction<span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">[</span>\n  <span class="token keyword">new</span> <span class="token class-name">ClassAction</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span>\n<span class="token punctuation">]</span>\n</code></pre></div><h2 id="wait"><a class="header-anchor" href="#wait" aria-hidden="true">#</a> Wait</h2><p>You can launch the action after another one through the &quot;wait&quot; property.</p><p>Any of the actions in <code>wait</code>, after execution, will call the current action.</p><div class="language-ts"><pre><code><span class="token comment">// Action queue</span>\n<span class="token keyword">import</span> <span class="token punctuation">{</span> ActMasterAction <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">&#39;vue-act-master&#39;</span><span class="token punctuation">;</span>\n\n<span class="token keyword">export</span> <span class="token keyword">class</span> <span class="token class-name">FirstAction</span> <span class="token keyword">implements</span> <span class="token class-name">ActMasterAction</span> <span class="token punctuation">{</span>\n  name <span class="token operator">=</span> <span class="token string">&#39;FirstAction&#39;</span><span class="token punctuation">;</span>\n  <span class="token function">exec</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n    <span class="token keyword">return</span> <span class="token punctuation">{</span>\n      name<span class="token operator">:</span> <span class="token string">&#39;Leo&#39;</span><span class="token punctuation">,</span>\n    <span class="token punctuation">}</span><span class="token punctuation">;</span>\n  <span class="token punctuation">}</span>\n<span class="token punctuation">}</span><span class="token punctuation">;</span>\n\n<span class="token keyword">export</span> <span class="token keyword">class</span> <span class="token class-name">SecondAction</span> <span class="token keyword">implements</span> <span class="token class-name">ActMasterAction</span> <span class="token punctuation">{</span>\n  <span class="token comment">// Names of events, after any and which action automatically starts.</span>\n  wait<span class="token operator">:</span> <span class="token punctuation">[</span><span class="token string">&#39;FirstAction&#39;</span><span class="token punctuation">]</span><span class="token punctuation">,</span>\n  name <span class="token operator">=</span> <span class="token string">&#39;SecondAction&#39;</span><span class="token punctuation">;</span>\n  <span class="token function">exec</span><span class="token punctuation">(</span>data<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n    <span class="token builtin">console</span><span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>data<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// { &quot;Name&quot;: &quot;Leo&quot; }</span>\n    <span class="token keyword">return</span> <span class="token punctuation">{</span>\n      name<span class="token operator">:</span> <span class="token string">&#39;Mike&#39;</span><span class="token punctuation">,</span>\n    <span class="token punctuation">}</span><span class="token punctuation">;</span>\n  <span class="token punctuation">}</span>\n<span class="token punctuation">}</span><span class="token punctuation">;</span>\n</code></pre></div><h2 id="di-in-actions"><a class="header-anchor" href="#di-in-actions" aria-hidden="true">#</a> DI in Actions</h2><p>To make the actions more independent, a simple Dependency injection (DI) implementation has been added.</p><p>It consists of storing entities that we access from actions into an internal container.</p><p>For example, we have an API. And no matter what we use (REST,GraphQL,gRPC), this interface will not change.</p><p>And we just use the implementation of this entity through an interface.</p><p>In the code it looks like this:</p><h3 id="adding-an-entity"><a class="header-anchor" href="#adding-an-entity" aria-hidden="true">#</a> Adding an entity</h3><div class="language-ts"><pre><code><span class="token comment">// main.ts</span>\n<span class="token comment">// ...</span>\n<span class="token keyword">import</span> <span class="token punctuation">{</span> VueActMaster <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">&#39;vue-act-master&#39;</span><span class="token punctuation">;</span>\n\n<span class="token keyword">import</span> <span class="token punctuation">{</span> actions <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">&#39;../you/actions/path&#39;</span><span class="token punctuation">;</span>\n<span class="token keyword">import</span> <span class="token punctuation">{</span> SuperAPI <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">&#39;../you/api&#39;</span><span class="token punctuation">;</span>\n\n<span class="token keyword">const</span> di <span class="token operator">=</span> <span class="token punctuation">{</span>\n  <span class="token comment">// key, value</span>\n  <span class="token string">&#39;api&#39;</span><span class="token operator">:</span> SuperAPI\n<span class="token punctuation">}</span><span class="token punctuation">;</span>\n\nVue<span class="token punctuation">.</span><span class="token function">use</span><span class="token punctuation">(</span>VueActMaster<span class="token punctuation">,</span> <span class="token punctuation">{</span>\n  actions<span class="token punctuation">,</span>\n  di<span class="token punctuation">,</span> <span class="token comment">// map of entities</span>\n<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n</code></pre></div><p>or in vue component</p><div class="language-html"><pre><code>// App.vue\n\n<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span><span class="token punctuation">&gt;</span></span><span class="token script"><span class="token language-javascript">\n<span class="token keyword">import</span> <span class="token punctuation">{</span> SuperAPI <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">&#39;../you/api&#39;</span><span class="token punctuation">;</span>\n\n<span class="token keyword">export</span> <span class="token keyword">default</span> <span class="token punctuation">{</span>\n  <span class="token function">data</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n    <span class="token keyword">return</span> <span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">;</span>\n  <span class="token punctuation">}</span><span class="token punctuation">,</span>\n\n  <span class="token function">mounted</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n    <span class="token comment">// Adding DI scope</span>\n    <span class="token keyword">this</span><span class="token punctuation">.</span>$act<span class="token punctuation">.</span><span class="token function">setDI</span><span class="token punctuation">(</span><span class="token string">&#39;api&#39;</span><span class="token punctuation">,</span> SuperAPI<span class="token punctuation">)</span><span class="token punctuation">;</span>\n  <span class="token punctuation">}</span>\n<span class="token punctuation">}</span>\n</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">&gt;</span></span>\n</code></pre></div><h3 id="using-entities"><a class="header-anchor" href="#using-entities" aria-hidden="true">#</a> Using entities</h3><p>There are two ways to get DI entities:</p><ul><li>Through decorators, if you use them in typescript.</li><li>Through the <code>useDI</code> method.</li></ul><div class="language-ts"><pre><code><span class="token comment">// with-di-action.ts</span>\n<span class="token comment">// with decorator</span>\n\n<span class="token keyword">import</span> <span class="token punctuation">{</span> UseDI<span class="token punctuation">,</span> ActMasterAction <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">&#39;vue-act-master&#39;</span><span class="token punctuation">;</span>\n\n<span class="token keyword">import</span> <span class="token punctuation">{</span> SuperAPI <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">&#39;../you/api&#39;</span><span class="token punctuation">;</span>\n\n<span class="token keyword">export</span> <span class="token keyword">class</span> <span class="token class-name">WithDiAction</span> <span class="token keyword">implements</span> <span class="token class-name">ActMasterAction</span> <span class="token punctuation">{</span>\n  name <span class="token operator">=</span> <span class="token string">&#39;login&#39;</span><span class="token punctuation">;</span>\n\n  @<span class="token function">UseDI</span><span class="token punctuation">(</span><span class="token string">&#39;api&#39;</span><span class="token punctuation">)</span>\n  <span class="token keyword">private</span> api<span class="token operator">!</span><span class="token operator">:</span> SuperAPI<span class="token punctuation">;</span> <span class="token comment">// SuperAPI as interface</span>\n\n  <span class="token class-name">exec</span><span class="token punctuation">(</span>loginData<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n    <span class="token keyword">return</span> <span class="token keyword">this</span><span class="token punctuation">.</span>api<span class="token punctuation">.</span><span class="token function">login</span><span class="token punctuation">(</span>loginData<span class="token punctuation">)</span><span class="token punctuation">;</span>\n  <span class="token punctuation">}</span>\n<span class="token punctuation">}</span>\n</code></pre></div><p>OR</p><div class="language-ts"><pre><code><span class="token comment">// with-di-action.ts</span>\n<span class="token comment">// without decorator</span>\n\n<span class="token keyword">import</span> <span class="token punctuation">{</span> ActMasterAction <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">&#39;vue-act-master&#39;</span><span class="token punctuation">;</span>\n<span class="token keyword">import</span> <span class="token punctuation">{</span> SuperAPI <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">&#39;../you/api&#39;</span><span class="token punctuation">;</span>\n\n<span class="token keyword">export</span> <span class="token keyword">class</span> <span class="token class-name">WithDiAction</span> <span class="token keyword">implements</span> <span class="token class-name">ActMasterAction</span> <span class="token punctuation">{</span>\n  name <span class="token operator">=</span> <span class="token string">&#39;login&#39;</span><span class="token punctuation">;</span>\n\n  <span class="token keyword">private</span> api<span class="token operator">:</span> SuperAPI<span class="token punctuation">;</span> <span class="token comment">// SuperAPI as interface</span>\n\n  <span class="token class-name">exec</span><span class="token punctuation">(</span>loginData<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n    <span class="token keyword">return</span> <span class="token keyword">this</span><span class="token punctuation">.</span>api<span class="token punctuation">.</span><span class="token function">login</span><span class="token punctuation">(</span>loginData<span class="token punctuation">)</span><span class="token punctuation">;</span>\n  <span class="token punctuation">}</span>\n\n  <span class="token comment">// get DI scope</span>\n  <span class="token function">useDI</span><span class="token punctuation">(</span><span class="token punctuation">{</span> api <span class="token punctuation">}</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n    <span class="token keyword">this</span><span class="token punctuation">.</span>api <span class="token operator">=</span> api<span class="token punctuation">;</span>\n  <span class="token punctuation">}</span>\n<span class="token punctuation">}</span>\n</code></pre></div><h2 id="emit-another-action-in-action"><a class="header-anchor" href="#emit-another-action-in-action" aria-hidden="true">#</a> Emit another Action in Action</h2><p>If you need to call another action inside the current one, you can do it using the <code>emit</code> handler.</p><p>It can be connected via the decorator or via the helper.</p><p>This way you can build chains of actions that can be stopped by <code>CancelledAct</code>.</p><div class="language-ts"><pre><code><span class="token comment">// with-emit-action.ts</span>\n<span class="token comment">// with decorator</span>\n\n<span class="token keyword">import</span> <span class="token punctuation">{</span> Emit<span class="token punctuation">,</span> ActMasterAction<span class="token punctuation">,</span> emitAction <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">&#39;vue-act-master&#39;</span><span class="token punctuation">;</span>\n\n<span class="token keyword">export</span> <span class="token keyword">class</span> <span class="token class-name">WithEmitAction</span> <span class="token keyword">implements</span> <span class="token class-name">ActMasterAction</span> <span class="token punctuation">{</span>\n  name <span class="token operator">=</span> <span class="token string">&#39;login&#39;</span><span class="token punctuation">;</span>\n\n  @<span class="token function">Emit</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n  <span class="token keyword">private</span> emit<span class="token operator">!</span><span class="token operator">:</span> emitAction<span class="token punctuation">;</span>\n\n  <span class="token function">exec</span><span class="token punctuation">(</span>loginData<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n    <span class="token keyword">const</span> result <span class="token operator">=</span> api<span class="token punctuation">.</span><span class="token function">login</span><span class="token punctuation">(</span>loginData<span class="token punctuation">)</span><span class="token punctuation">;</span>\n\n    <span class="token comment">// use another action</span>\n    <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">emit</span><span class="token punctuation">(</span><span class="token string">&#39;set.authorized&#39;</span><span class="token punctuation">,</span> <span class="token boolean">true</span><span class="token punctuation">)</span>\n  <span class="token punctuation">}</span>\n<span class="token punctuation">}</span><span class="token punctuation">;</span>\n</code></pre></div><p>OR</p><div class="language-ts"><pre><code><span class="token comment">// with-emit-action.ts</span>\n<span class="token comment">// without decorator</span>\n\n<span class="token keyword">import</span> <span class="token punctuation">{</span> ActMasterAction<span class="token punctuation">,</span> emitAction <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">&#39;vue-act-master&#39;</span><span class="token punctuation">;</span>\n\n<span class="token keyword">export</span> <span class="token keyword">class</span> <span class="token class-name">WithEmitAction</span> <span class="token keyword">implements</span> <span class="token class-name">ActMasterAction</span> <span class="token punctuation">{</span>\n  name <span class="token operator">=</span> <span class="token string">&#39;login&#39;</span><span class="token punctuation">;</span>\n\n  <span class="token keyword">private</span> emit<span class="token operator">:</span> emitAction<span class="token punctuation">;</span>\n\n  <span class="token function">exec</span><span class="token punctuation">(</span>loginData<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n    <span class="token keyword">const</span> result <span class="token operator">=</span> api<span class="token punctuation">.</span><span class="token function">login</span><span class="token punctuation">(</span>loginData<span class="token punctuation">)</span><span class="token punctuation">;</span>\n\n    <span class="token comment">// use another action</span>\n    <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">emit</span><span class="token punctuation">(</span><span class="token string">&#39;set.authorized&#39;</span><span class="token punctuation">,</span> <span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n  <span class="token punctuation">}</span>\n\n  <span class="token comment">// set Emitter</span>\n  <span class="token function">useEmit</span><span class="token punctuation">(</span>emit<span class="token operator">:</span> emitAction<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n    <span class="token keyword">this</span><span class="token punctuation">.</span>emit <span class="token operator">=</span> emit<span class="token punctuation">;</span>\n  <span class="token punctuation">}</span>\n<span class="token punctuation">}</span>\n</code></pre></div>',61);p.render=function(a,t,p,e,c,l){return n(),s("div",null,[o])};export default p;export{t as __pageData};
